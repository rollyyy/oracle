1) EMP와 DEPT TABLE을 JOIN하여 부서 번호,  부서명,  이름, 급여를 출력하라.

SELECT D.DEPTNO, D.DNAME, E.ENAME, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO

2)이름이 'ALLEN'인 사원의 부서명을 출력하라.

SELECT E.ENAME, D.DNAME
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.ENAME = 'ALLEN'
 

3)DEPT Table에 있는 모든 부서를 출력하고, EMP Table에 있는 DATA와 JOIN하여 모든 사원의 이름, 부서번호, 부서명, 급여를 출력하라.

SELECT E.ENAME, D.DEPTNO, D.DNAME, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO(+) = D.DEPTNO

4)EMP Table에 있는 EMPNO와 MGR을 이용하여 서로의 관계를 다음과 같이 출력하라.
SMITH의 매니저는 FORD이다.

SELECT E.ENAME || '의 매니저는' || M.ENAME || '이다.'
  FROM EMP E, EMP M
 WHERE E.MGR = M.EMPNO
   AND E.ENAME = 'SMITH'

5)'ALLEN'의 직무와 같은 사람의 이름, 부서명, 급여, 직무를 출력하라.

SELECT E.ENAME, D.DNAME, E.SAL, E.JOB
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND JOB = (SELECT JOB
                FROM EMP
      WHERE ENAME = 'ALLEN')
      
6)'JONES'가 속해있는 부서의 모든사람의 사원번호, 이름, 입사일, 급여를 출력하라.

SELECT EMPNO, ENAME, HIREDATE, SAL
  FROM EMP
 WHERE DEPTNO = (SELECT DEPTNO
                   FROM EMP
      WHERE ENAME = 'JONES')

 
7)전체 사원의 평균임금보다 많은 사원의 사원번호, 이름, 부서명, 입사일, 지역, 급여를출력하라.

SELECT E.EMPNO, E.ENAME, D.DNAME, E.HIREDATE, D.LOC, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND SAL > (SELECT AVG(SAL)
                FROM EMP)

8)10번 부서의 사람들중에서 20번 부서의 사원과 같은 업무를 하는 사원의 사원번호, 이름, 부서명, 입사일, 지역을 출력하라.

SELECT E.EMPNO,
       E.ENAME,
    D.DNAME,
    E.HIREDATE,
    D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.DEPTNO = 10
   AND E.JOB IN (SELECT JOB
                 FROM EMP
    WHERE DEPTNO = 20)

9)10번 부서 중에서 30번 부서에는 없는 임무를 하는 사원의 사원번호, 이름, 부서명, 입사일, 지역을 출력하라.

SELECT E.EMPNO, E.ENAME, D.DNAME, E.HIREDATE, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.DEPTNO = 10
   AND E.JOB NOT IN (SELECT JOB
                       FROM EMP
       WHERE DEPTNO = 30)
       
       
10)10번 부서와 같은 일을 하는 사원의 사원번호, 이름, 부서명, 지역, 급여를 급여가 많은 순으로 출력하라.

SELECT E.EMPNO, E.ENAME, D.DNAME, D.LOC, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.DEPTNO != 10
   AND E.JOB IN (SELECT JOB
                 FROM EMP
    WHERE DEPTNO = 10)
 ORDER BY E.SAL DESC

11)'MARTIN'이나 'SCOTT'의 급여와 같은 사원의 사원번호, 이름, 급여를 출력하라.

SELECT EMPNO, ENAME, SAL
  FROM EMP
 WHERE SAL IN (SELECT SAL
                 FROM EMP
    WHERE ENAME IN ('MARTIN', 'SCOTT'))
    
 12)급여가 30번 부서의 최고 급여보다 높은 사원의 사원번호, 이름, 급여를 출력하라.

SELECT EMPNO, ENAME, SAL
  FROM EMP
 WHERE SAL > (SELECT MAX(SAL)
                FROM EMP
      WHERE DEPTNO = 30)
 

13)급여가 30번 부서의 최저 급여보다 높은 사원의 사원번호, 이름, 급여를 출력하라.

SELECT EMPNO, ENAME, SAL
  FROM EMP
 WHERE SAL > (SELECT MIN(SAL)
                FROM EMP
      WHERE DEPTNO = 30)
      
1) 10번 부서의 모든 사람들에게 급여의 13%를 보너스로 지불하기로 하였다. 이름, 급여,보너스금액,부서번호를 출력하라.

select ename, sal, case when deptno = 10 then sal*0.13 else 0 end as bonus
from emp
where deptno = 10
order by bonus desc

2) 1990년 1월 1일 현재, 100일 10시간 이상 근무한 사람을 검색하시오.

SELECT employee_id, last_name FROM employees
WHERE hire_date + TO_DSINTERVAL('100 10:00:00') <= DATE '1990-01-01'

3) 1990년 1월 1일 현재, 100일 10시간 이상 근무한 사람을 검색하시오.

SELECT employee_id, last_name FROM employees
WHERE hire_date + TO_DSINTERVAL('100 10:00:00') <= DATE '1990-01-01'

4) 모든 사원의 이름, 부서번호, 부서이름을 표시하시오.(emp,dept)

SELECT  e.ename, e.deptno, d.dname
FROM emp e, dept d
WHERE e.deptno = d.deptno;


5) 업무가 MANAGER인 사원의 정보를 이름,업무,부서명,근무지 순으로 출력하시오.(emp,dept)

SELECT  e.ename, e.job, d.dname, d.loc
FROM emp e, dept d
WHERE e.deptno = d.deptno
AND e.job = 'MANAGER';

6) 커미션을 받고 급여가 1,600이상인 사원의 사원이름,부서명,근무지를 출력하시오

SELECT  e.ename, d.dname, d.loc
FROM emp e, dept d
WHERE e.deptno = d.deptno
AND comm IS NOT NULL
AND comm <> 0
AND sal >= 1600;


7) 근무지가 CHICAGO인 모든 사원의 이름,업무,부서번호 및 부서이름을 표시하시오.

SELECT  e.ename, e.job,d.deptno, d.dname
FROM emp e, dept d
WHERE e.deptno = d.deptno
AND d.loc = 'CHICAGO'; 

8) 근무지별로 근무하는 사원의 수가 5명 이하인 경우, 인원이 적은 도시순으로 정렬하시오.(근무 인원이 0명인 곳도 표시)

SELECT  d.loc, COUNT(e.empno)
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno
GROUP BY d.loc
HAVING COUNT(e.empno) <= 5
ORDER BY COUNT(e.empno) ASC ;


9) 사원의 이름 및 사원 번호를 관리자의 이름과 관리자 번호와 함께 표시하고  각각의 열 레이블은 employee, emp#, manager, mgr#로 지정하시오.

SELECT e.ename employee, e.empno "emp#" , m.ename manager, m.empno "mgr#"
FROM emp e, emp m
WHERE e.mgr = m.empno;

10) 관리자보다 먼저 입사한 모든 사원의 이름 및 입사일을 관리자의 이름 및 입사일과 함께 표시하고 열 레이블을 각각 employee, emp hired, manager, mgr hired로 지정

SELECT e.ename employee, e.hiredate "emp hired" , m.ename manager, m.hiredate "mgr hired"
FROM emp e, emp m
WHERE e.mgr = m.empno
AND e.hiredate < m.hiredate;

11) 사원의 이름 및 사원번호를 관리자의 이름과 관리자 번호와 함께 표시하고 각각의 열  레이블은 employee, emp#, manager, mgr#로 지정하는데 King을 포함하여 관리자가 없는 모든 사원을 표시하도록 하고 결과를 사원번호를 기준으로 정렬

SELECT e.ename employee, e.empno "emp#" , m.ename manager, m.empno "mgr#"
FROM emp e, emp m
WHERE e.mgr = m.empno(+)
ORDER BY e.empno ASC;

 --직책이 SALESMAN, ANALYST인 사람의 모든 정보를 출력하시오. ( or, like, in, any, some )
 select *
from emp
where job = 'SALESMAN' 
or job = 'ANALYST';

select *
from emp
where job like 'S%' 
or job like 'A%';

--1981년 5월 1일 ~ 1982년 2월 사이에 입사한 사원들의 모든 정보를 부서번호순(오름차순)으로 검색하시오. ( TO_DATE )

select *
from emp
where hiredate >= TO_DATE('19810501', 'yyyymmdd') 
and hiredate < TO_DATE('19820228', 'yyyymmdd')
order by deptno;

4. 직급이 SALESMAN 일 경우 급여  * 1.1, CLERK 일 경우 급여 * 1.3, MANAGER 일 경우 급여 * 1.5 를 하고 모든 정보를 출력하시오. ( DECODE )

select empno
     , job
     , ename
     , sal
     , decode(job, 'SALESMAN', sal*1.1, 'CLERK', sal*1.3, 'MANAGER', sal*1.5, sal) as 인상된급여 
from emp;

5. 모든 사원들에게 커미션을 200씩 추가하여 사원이름, 커미션 값을 출력하시오. ( nvl )

select ename
     , nvl(comm,0) + 200 
from emp;

6.  커미션을 가지고 있는 사원은 Y, 커미션이 NULL값인 사원은 N을 포함하여 사원이름과 커미션 값을 출력하시오.( nvl2 )

select ename
     , nvl2(comm, 'Y', 'N') 
from emp;
cs
 

7. 1981년 입사자들의 평균 임금을 출력하시오.

select AVG(sal)
from emp
where TO_CHAR(hiredate,'YYYY') = '1981';

8. 사원번호, 사원이름, 총 급여(SAL+COMM)을 출력하시오. 

select empno
     , ename
     , sal+nvl(comm,0)
from emp;

9. SALESMAN 의 커미션 평균을 출력하시오. ( group by )
 
--GROUP BY 함수 = 특정 컬럼을 기준으로 집계를 내는데에 사용한다.

--SELECT [그룹으로 묶은 컬럼명]
--     , [집계할 컬럼명]
--FROM [테이블명]
--GROUP BY [그룹으로 묶을 컬럼명]

select job
     , AVG(nvl(comm,0))
from emp
where job='SALESMAN'
group by job;

1. 사원수가 3명 이상인 부서명과 인원수를 출력하시오. ( group by, having )
select job
     , count(*)
from emp
group by job
having count(*) >= 3;

2. 직무 중 가장 적게 수입을 가지는 직무의 평균 월급을 출력하시오.

select min(AVG(sal)) 
from emp 
group by job;

3. 사원번호, 사원이름, 부서이름, 부서번호를 출력하시오. ( Join )

select emp.ename
     , emp.empno
     , dept.dname
     , dept.deptno
from emp
   , dept
where emp.deptno = dept.deptno;

4. 부서가 30이고, 급여가 1500이상인 사원의 이름, 급여, 부서명, 부서번호를 출력하시오. ( Join on )

select emp.ename
     , emp.sal
     , dept.dname
     , dept.deptno
from emp join dept
on emp.deptno = dept.deptno
where emp.deptno = 30
and sal >= 1500;

5. 사원수가 5명이 넘는 부서의 부서명과 사원수를 출력하시오.
 
select dept.dname
     , count(*)
from emp
   , dept
where emp.deptno = dept.deptno
group by emp.deptno
       , dept.dname
having count(*) >= 5;

6. ADAMS 사원이 근무하는 부서이름과 지역이름을 출력하시오.

select dept.dname
     , dept.loc
     , emp.ename
from emp
   , dept
where emp.deptno = dept.deptno
and emp.ename = 'ADAMS';

7. NEW YORK 이나 DALLAS 지역에 근무하는 사원들의 사원번호, 사원이름을 사원번호 순으로 검색하시오.

select e.empno
     , e.ename
from emp e
   , dept d
where e.deptno = d.deptno
and (d.loc = 'NEWYORK' or d.loc='DALLAS')
order by e.empno;

8.  부서번호 10번인 사원들의 사원번호, 사원이름, 월급을 출력하시오.

select empno, ename, sal
from emp
where deptno=10;
cs
 

9.  사원번호 7369인 사원 이름, 입사일, 부서번호를 출력하시오.

select ename as 사원이름, hiredate as 입사일, deptno as 부서번호
from emp
where empno=7369;

10. 사원번호 7300크고 7400 작은 사원 이름, 입사일, 부서번호를 출력하시오.

select ename as 사원이름, hiredate as 입사일, deptno as 부서번호
from emp
where empno > 7300 AND empno < 7400;

11.  EMP 모든 정보를 (사원번호 기준 내림차순으로) 검색하시오.
정렬

select *
from emp
order by empno desc;

12. 이름이 S로 시작하는 모든 사람의 사원번호와 이름을 출력하시오.

select *
from emp
order by empno desc;

13. 직속상관 사원번호가 없는 사원의 모든 정보를 검색하시오.

select *
from emp
where mgr is null;

14. 사원수가 3명 이상인 부서명과 인원수를 출력하시오. ( group by, having )

select job
     , count(*)
from emp
group by job
having count(*) >= 3;


15. 직무 중 가장 적게 수입을 가지는 직무의 평균 월급을 출력하시오.

select min(AVG(sal)) 
from emp 
group by job;

16. 사원번호, 사원이름, 부서이름, 부서번호를 출력하시오. ( Join )
-- 내부조인

select emp.ename
     , emp.empno
     , dept.dname
     , dept.deptno
from emp
   , dept
where emp.deptno = dept.deptno;
cs

--Natural 조인

select ename
     , empno
     , dname
     , deptno
from emp natural join dept;

-- Join On 

select ename
     , empno
     , dname
     , dept.deptno
from emp join dept
on emp.deptno = dept.deptno;

--Join Using

select ename
     , empno
     , dname
     , deptno
from emp join dept
using (deptno);

17. 부서가 30이고, 급여가 1500이상인 사원의 이름, 급여, 부서명, 부서번호를 출력하시오. ( Join on )

select emp.ename
     , emp.sal
     , dept.dname
     , dept.deptno
from emp join dept
on emp.deptno = dept.deptno
where emp.deptno = 30
and sal >= 1500;
cs
 

18. 사원수가 5명이 넘는 부서의 부서명과 사원수를 출력하시오.
 
select dept.dname
     , count(*)
from emp
   , dept
where emp.deptno = dept.deptno
group by emp.deptno
       , dept.dname
having count(*) >= 5;

19. ADAMS 사원이 근무하는 부서이름과 지역이름을 출력하시오.

select dept.dname
     , dept.loc
     , emp.ename
from emp
   , dept
where emp.deptno = dept.deptno
and emp.ename = 'ADAMS';

20. NEW YORK 이나 DALLAS 지역에 근무하는 사원들의 사원번호, 사원이름을 사원번호 순으로 검색하시오.

select e.empno
     , e.ename
from emp e
   , dept d
where e.deptno = d.deptno
and (d.loc = 'NEWYORK' or d.loc='DALLAS')
order by e.empno;

21. 이름이 A로 시작하는 사원의 사원번호, 이름, 입사일자, 부서번호 출력

SELECT EMPNO, ENAME, HIREDATE, DEPTNO
FROM EMP
WHERE ENAME like 'A%';

22. 입사년도가 1981년 이외 입사자의 모든 정보

SELECT *
FROM EMP
WHERE HIREDATE NOT LIKE '1981'; 


23. 입사년월이 1981/02 에 입사한 사람의 모든 정보

SELECT *
FROM EMP
WHERE HIREDATE >= '1981/02/01'
AND HIREDATE <= '1981/02/28';

24. 등급순, 급여 높은순 출력

/* SAL 100~2000 사이   3등급
      2001~3000 사이    2등급
      그외              1등급

*/

SELECT (CASE WHEN (SAL BETWEEN '100' AND '2000') 
THEN '3등급' 
WHEN (SAL BETWEEN '2001' AND '3000') 
THEN '2등급' 
ELSE '1등급' END) "등급", SAL
FROM EMP
ORDER BY SAL DESC;


25. 위의 결과에서 1등급만 추출

SELECT (CASE WHEN (SAL BETWEEN '100' AND '2000') THEN '3등급' WHEN (SAL BETWEEN '2001' AND '3000') THEN '2등급' ELSE '1등급' END) "등급", SAL
FROM EMP
WHERE SAL > '3001'
ORDER BY SAL DESC;

26. 이름 중 S가 포함된 사원의 모든 정보 출력

SELECT *
FROM EMP
WHERE ENAME like '%S%';

27. 상급자(MGR)가 MGR, SAL 순으로 정렬하여 조건처럼 출력 단, MGR이 NULL인 사람부터 나오도록

SELECT *
FROM EMP
ORDER BY MGR NULLS FIRST, SAL DESC;


28. 커미션(COMM)을 받는 사원의 모든 정보를 커미션이 적은 순으로 출력

SELECT *
FROM EMP
WHERE COMM IS NOT NULL AND COMM > '0'
ORDER BY COMM ASC;

29. 20번 부서나 30번 부서에 속하고 이름에 ‘AR’이 포함된 사원들의 이름과 부서번호, 업무(job)를 구하시오. (where절, OR 또는 IN, LIKE 연산자 이용)

SELECT ENAME, DEPTNO, JOB
FROM EMP
WHERE (ename LIKE '%AR%' )
AND (DEPTNO IN (20, 30));
 
 

30.  RESEARCH 부서에서 일하는 사원들 중 급여가 2,000이하인 사원들의 수를 구하기 위해, (a) join 을 이용하는 질의와, (b) subquery를 이용하는 질의를 각각 작성하시오.

SELECT COUNT(DISTINCT empno)
FROM emp e JOIN dept d
    ON e.deptno = d.deptno
WHERE dname = 'RESEARCH'
AND sal <= 2000;

31. 사원들 중 급여등급이 5에 속하면서 수당(comm)이 500미만인 사원들의 이름과 급여, 수당을 구하고 “연봉”을 계산하시오. 단, 수당을 모를 경우 0으로 간주함 (non-equi-join, NVL 이용)

SELECT ENAME, SAL, NVL(COMM, 0), sal*12 + NVL(COMM, 0) "연봉"
FROM emp e, salgrade s
WHERE s.grade = 5
AND (e.sal >= s.losal AND e.sal <= s.hisal) AND (e.comm < 500 OR e.comm IS NULL);

32. 모든 사원들의 이름, 입사일, 재직년수(만으로 계산), “퇴사예정일”(재직한지 30년 되는 날)을 구 하시오. 입사일은 “OOOO년 OO월 OO일” 형식으로 출력하고, 입사일이 빠른 사원부터 순서대 로 출력할 것

SELECT ENAME, TO_CHAR(HIREDATE, 'YYYY "년" MM "월" DD "일"')"입사일", 
       ROUND(ROUND(MONTHS_BETWEEN(SYSDATE, HIREDATE), 2)/12, 0) "재직년수", 
       ADD_MONTHS(HIREDATE, 360) "퇴사예정일"
FROM emp, DUAL
ORDER BY HIREDATE ASC;

33. 각 부서에서 같은 업무를 수행하는 사원들을 분류하여 부서번호, 업무명, 인원수, 평균 급여를 출력하시오. (group by절, 집계 함수 이용)

SELECT deptno, JOB, COUNT(empno), AVG(sal)
FROM EMP
GROUP BY deptno, job;

34. 사원이 2명 이상 있는 부서들에 대해 부서명과 평균 급여를 각각 구하시오. (having절 이용) (선택) 위 질의를 having절을 사용하지 않고 derived relation(subquery)을 사용하여 작성하시오.

SELECT d.dname, AVG(sal)
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY d.dname
HAVING COUNT(empno) >= 2

35. 모든 부서에 대해 부서명과 사원수, 최대급여를 각각 구하시오. 단, 사원이 한 명도 없는 부서 도 결과에 포함되어야 함 (outer-join 이용)

SELECT d.DNAME, COUNT(e.ename), max(e.sal)
FROM emp e RIGHT OUTER JOIN dept d
    ON e.deptno = d.deptno
GROUP BY d.DNAME

36. 각 사원에 대해 같은 부서에 근무하는 동료 사원들의 이름을 구하시오. (self-join 이용)

SELECT e.ename,  f.ename "동료"
FROM emp e JOIN emp f
ON e.deptno = f.deptno
where f.deptno not in
    (select deptno
     from emp
     where e.empno = f.empno)
ORDER BY e.ename ASC;

37. 각 사원의 이름, 급여, “공제액”을 출력하되 급여가 가장 많은 사원부터 순서대로 출력하시오.
단, 공제액은 급여가 1000미만인 경우 급여의 1%, 급여가 1000이상 2000미만인 경우 1.5%, 급 여가 2000이상인 경우는 2%에 해당하는 금액으로 계산함 (CASE WHEN, 정렬 이용)

SELECT ENAME, SAL, (CASE WHEN sal >= 2000 THEN SAL * 0.02
                    WHEN (1000 <= sal AND sal < 2000) THEN SAL * 0.015
                    WHEN sal < 1000 THEN SAL * 0.01 END)"공제액"
FROM EMP
ORDER BY SAL DESC;

38. SALES 부서에 속한 사원들에 대해 사원번호, 이름, 소속부서명, 급여, 수당, 입사일, 관리자 사 원번호를 검색하여 새로운 테이블 “EMPXXXXXX”로 저장하시오.

CREATE TABLE "EMP180986" 
   (
        "EMPNO" NUMBER(4,0), 
        "ENAME" VARCHAR2(10 BYTE), 
        "DNAME" VARCHAR2(14 BYTE), 
        "SAL" NUMBER(7,2), 
        "COMM" NUMBER(7,2), 
        "HIREDATE" DATE, 
        "MGR" NUMBER(4,0)
   )

39. JULIET이 새로 입사했다고 가정하자. 사원번호는 8000, 입사일은 오늘(현재 시각), 급여는 2000 이고, 그 외의 정보들은 모두 미정이다. 이 사원의 정보를 1번 문제에서 생성한 테이블에 저장 하시오.

INSERT INTO EMP180986 (ename, empno, hiredate, sal) VALUES ('JULIET', 8000, '20/09/23', 2000);

40. RESEARCH 부서에 속한 모든 사원들의 데이터도 1번 테이블에 추가하시오.

INSERT INTO EMP180986
        SELECT EMPNO, ENAME, DNAME, SAL, COMM, HIREDATE, MGR
        FROM EMP e JOIN DEPT d
        ON e.DEPTNO = d.deptno 
        WHERE dname = 'RESEARCH';

41. 수당이 미정인 사원들은 모두 급여의 10%를 수당으로 받도록 결정되었다. 1번 테이블의 데이터를 변경하시오.

UPDATE EMP180986
    SET COMM = SAL * 0.1
    WHERE COMM IS NULL;

 
42. JULIET이 SMITH와 같은 부서, 같은 관리자에 배정되었다. 이를 1번 테이블에 반영하시오.

UPDATE EMP180986
    SET (DNAME, MGR) = ( SELECT dname, MGR
                         FROM EMP180986
                         WHERE ename = 'SMITH' 
                        )
    WHERE ename = 'JULIET';

43. 재직년수가 30년이 되는 날을 퇴사예정일(retiredate)로 가정하고, 1번 테이블에 사원들의 퇴사 예정일을 저장하기 위한 컬럼을 추가한 후 모든 사원들의 퇴사예정일을 계산하여 저장하시오.

ALTER TABLE emp180986
    ADD (retiredate VARCHAR(10));
 
UPDATE emp180986
    SET retiredate = ADD_MONTHS(HIREDATE, 360);

44. 1번 테이블에서 관리자사원번호 컬럼에는 실제로 존재하는 사원번호 값만 저장될 수 있도록 제약을 추가하시오. 그 후 이 제약을 위배하는 잘못된 행을 삽입하여 오류 발생 여부를 확인하시오.

ALTER TABLE emp180986 ADD CONSTRAINT emp180986_empno_pk PRIMARY KEY (empno);

ALTER TABLE emp180986 ADD CONSTRAINT emp180986_mgr_fk FOREIGN KEY(mgr) REFERENCES emp180986(empno);

45. 신입사원 세 명의 정보(임의의 값)를 1번 테이블에 추가하시오. 단, 사원 번호는 값이 8010부터 시작해서 9990까지 10씩 증가하는 sequence를 정의해서 생성하시오.

CREATE sequence emp180986_seq
INCREMENT BY 10
START WITH 8010;

INSERT INTO EMP180986 
VALUES (emp180986_seq.nextval,'MINSUN', 'RESEARCH', 8000, 80, '20/09/23', 8000, '50/09/23');

INSERT INTO EMP180986 
VALUES (emp180986_seq.nextval,'JIN', 'RESEARCH', 2000, 20, '20/09/23', 8010, '50/09/23');

INSERT INTO EMP180986 
VALUES (emp180986_seq.nextval,'SOMSOM', 'RESEARCH', 1000, 10, '20/09/23', 8010, '50/09/23');

 

46. 1번 테이블의 사원들 중 근무 기간(일)이 가장 긴 사원 3명을 구해 사원번호, 이름, 근무기간을 차례대로 출력하시오.

SELECT ROWNUM, empno, ename, ROUND(SYSDATE - hiredate , 2)
FROM ( SELECT empno, ename, hiredate
       FROM emp180986
       ORDER BY HIREDATE ASC)
WHERE ROWNUM <= 3;

47. 급여가 2000을 넘는 사원의 이름과 급여를 표현, 급여가 많은 것부터 작은 순으로 출력하시오.

SELECT ENAME 사원명, SAL 급여
FROM EMP
WHERE SAL>=2000
ORDER BY SAL DESC;

48. 동물 보호소에 들어온 동물 중 아픈 동물1의 아이디와 이름을 조회하는 SQL 문을 작성해주세요. 이때 결과는 아이디 순으로 조회해주세요

SELECT 
    ANIMAL_ID,	
    NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION = 'Sick'
ORDER BY ANIMAL_ID;

49. ANIMAL_INS 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. ANIMAL_INS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, INTAKE_CONDITION, NAME, SEX_UPON_INTAKE는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.
동물 보호소에 들어온 동물의 이름은 몇 개인지 조회하는 SQL 문을 작성해주세요. 이때 이름이 NULL인 경우는 집계하지 않으며 중복되는 이름은 하나로 칩니다.
 
SELECT
    COUNT(DISTINCT(NAME)) count
    FROM ANIMAL_INS
    WHERE NAME IS NOT NULL;
 
 50.어린 동물 찾기
 SELECT animal_id, name
from animal_ins
where INTAKE_CONDITION != 'Aged'
order by 1;

51. 입양 시각 구하기
SELECT HOUR(DATETIME) AS HOUR, COUNT(DATETIME) AS COUNT
FROM ANIMAL_OUTS
WHERE HOUR(DATETIME) >= 9
  AND HOUR(DATETIME) <= 19
GROUP BY HOUR(DATETIME)
ORDER BY HOUR(DATETIME);

52.동물 보호소에 가장 먼저 들어온 동물의 이름을 조회하는 SQL 문을 작성해주세요. (상위 N개 레코드)

SELECT NAME
FROM ANIMAL_INS
ORDER BY DATETIME
LIMIT 1;

53. 매출테이블에서 각 상품(브랜드)별 신발 판매수량이 각 상품별 평균 판매수량 보다 높은 매출을 출력하시오.

SELECT * 
FROM dbo.salesTbl AS S1
WHERE s_qty > (
SELECT AVG(s_qty) 
FROM dbo.salesTbl AS S2 
WHERE S2.s_p_code = S1.s_p_code
);

