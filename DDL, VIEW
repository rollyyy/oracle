-- 10번
-- 춘 기술대학교 학생들의 정보만이 포함되어 있는 학생일반정보 VIEW를 만들고자 한다.
-- 아래 내용을 참고하여 적절한 SQL문을 작성하시오.
CREATE OR REPLACE VIEW VW_학생일반정보
(
  학번
, 학생이름
, 주소
)
AS 
SELECT 
       S.STUDENT_NO
     , S.STUDENT_NAME
     , S.STUDENT_ADDRESS
  FROM TB_STUDENT S;
   
-- 11번
-- 춘 기술대학교는 1년에 두 번씩 학과별로 지도교수가 지도 면담을 진행한다.
-- 이를 위해 사용할 학생이름, 학과이름, 담당교수이름으로 구성되어 있는 VIEW를 만드시오.
-- 이때 지도 교사가 없는 학생이 있을 수 있음을 고려하시오.
-- (단, 이 VIEW는 단순 SELECT만을 할 경우 학과별로 정렬되어 화면에 보여지게 만드시오.)
CREATE OR REPLACE VIEW VW_지도면담
(
  학생이름
, 학과이름
, 지도교수이름
)
AS 
SELECT 
       S.STUDENT_NAME
     , D.DEPARTMENT_NAME
     , NVL(P.PROFESSOR_NAME, '지도교수 없음')
  FROM 
       TB_STUDENT S
     , TB_DEPARTMENT D
     , TB_PROFESSOR P
 WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
   AND S.COACH_PROFESSOR_NO = P.PROFESSOR_NO(+)
 ORDER BY 2;

-- 12번
-- 모든 학과의 학과별 학생 수를 확인할 수 있도록 적절한 VIEW를 작성해보자.
CREATE OR REPLACE VIEW VW_학과별학생수
(
  DEPARTMENT_NAME
, STUDENT_COUNT
)
AS 
SELECT 
       D.DEPARTMENT_NAME
     , COUNT(*)
  FROM TB_DEPARTMENT D
     , TB_STUDENT S
 WHERE D.DEPARTMENT_NO = S.DEPARTMENT_NO
 GROUP BY D.DEPARTMENT_NAME;
   
-- 13번
-- 위에서 생성한 학생일반정보 VIEW를 통해서 학번이 A213046인 학생의 이름을 본인 이름으로 변경
UPDATE 
       VW_학생일반정보
   SET 학생이름 = '본인이름'
 WHERE 학번 = 'A213046';

-- 14번
-- 13번에서와 같이 VIEW를 통해서 데이터가 변경될 수 있는 상황을 막으려면 VIEW를 어떻게 생성해야 하는지 작성하시오
-- WITH READ ONLY 기재 시 SELECT만 가능
CREATE OR REPLACE VIEW VW_학생일반정보
(
  학번
, 학생이름
, 주소
)
AS 
SELECT 
       S.STUDENT_NO
     , S.STUDENT_NAME
     , S.STUDENT_ADDRESS
  FROM TB_STUDENT S
  WITH READ ONLY;

INSERT 
  INTO VW_학생일반정보 
VALUES ('1','1','1');
   
UPDATE 
       VW_학생일반정보
   SET 학생이름 = '서가람람' 
 WHERE 학번 = 'A213046';
   
-- 15번
-- 춘 기술 대학교는 매년 수강신청 기간만 되면 특정 인기 과목들에 수강 신청이 몰려 문제가 되고 있다.
-- 최근 3년(2007~2009)을 기준으로 수강인원이 가장 많았던 3과목을 찾는 구문을 작성해 보시오
-- 3년이 아니라 5년(2005~2009)으로 작성해야 PDF와 동일한 결과 얻을 수 있음

SELECT 
       과목번호
     , 과목이름
     , "누적수강생수(명)"
FROM (SELECT C.CLASS_NO 과목번호
           , C.CLASS_NAME 과목이름
           , COUNT(*) "누적수강생수(명)"
        FROM TB_CLASS C 
        JOIN TB_GRADE G ON(C.CLASS_NO = G.CLASS_NO)
       WHERE SUBSTR(G.TERM_NO, 1, 4) IN ('2009', '2008', '2007', '2006', '2005')
       GROUP BY C.CLASS_NO, C.CLASS_NAME
       ORDER BY 3 DESC)
WHERE ROWNUM <= 3; 
